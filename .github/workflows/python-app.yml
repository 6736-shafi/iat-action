name: Deploy Azure ML Pipeline (Dev to Prod)

on:
  push:
    branches:
      - dev
      - main # Trigger on pushes to dev and main branches
  pull_request:
    branches:
      - main
    types: [closed] # Trigger on PR merge into main for production deployment
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  deploy-to-dev:
    # Only run this job when pushing to the 'dev' branch
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: development # Associate with the 'development' GitHub environment for secrets and rules
    permissions:
      id-token: write # Required for OpenID Connect (OIDC) authentication with Azure
      contents: read # Required to checkout the repository code

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Debug - List files in current directory
        # This step helps verify that all necessary files (e.g., run_pipeline.py, components directory) are present
        run: |
          echo "Listing files in current directory: $(pwd)"
          ls -F
          echo "Listing files recursively in current directory:"
          ls -RF .
          echo "Checking for 'components' directory:"
          if [ -d "components" ]; then
            echo "'components' directory found."
            ls -RF components/
          else
            echo "'components' directory NOT found!"
          fi

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        # Install required Python packages for Azure ML interaction
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml azure-identity

      - name: Log in to Azure with OIDC
        # Uses the Azure Login action for secure, credential-less authentication via OIDC
        # Ensure AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID secrets are configured in the 'development' environment
        uses: azure/login@v1.4.6 # Pinning to a specific version for stability
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # No 'creds' input is needed when using client-id, tenant-id, and subscription-id for OIDC

      - name: Verify Azure CLI Login
        # Optional: Run a simple Azure CLI command to confirm successful login
        run: az account show

      - name: Run Azure ML Pipeline in Dev Environment
        # Pass Azure ML workspace details as environment variables to the Python script
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP }} # Ensure this secret is set for 'development'
          WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE }} # Ensure this secret is set for 'development'
        run: python run_pipeline.py # Assumes run_pipeline.py is at the root of your repo

  deploy-to-prod:
    # Trigger conditions for production deployment:
    # 1. Push directly to the 'main' branch
    # 2. A pull request is merged into the 'main' branch
    if: |
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: production # Associate with the 'production' GitHub environment (can require manual approval)
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read # Required to checkout the repository code

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Debug - List files in current directory
        # This step helps verify that all necessary files are present
        run: |
          echo "Listing files in current directory: $(pwd)"
          ls -F
          echo "Listing files recursively in current directory:"
          ls -RF .
          echo "Checking for 'components' directory:"
          if [ -d "components" ]; then
            echo "'components' directory found."
            ls -RF components/
          else
            echo "'components' directory NOT found!"
          fi

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        # Install required Python packages for Azure ML interaction
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml azure-identity

      - name: Log in to Azure with OIDC
        # Uses the Azure Login action for secure, credential-less authentication via OIDC
        # Ensure AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID secrets are configured in the 'production' environment
        uses: azure/login@v1.4.6 # Pinning to a specific version for stability

        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure CLI Login
        # Optional: Run a simple Azure CLI command to confirm successful login
        run: az account show

      - name: Run Azure ML Pipeline in Prod Environment
        # Pass Azure ML workspace details as environment variables to the Python script
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP }} # Ensure this secret is set for 'production'
          WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE }} # Ensure this secret is set for 'production'
        run: python run_pipeline.py # Assumes run_pipeline.py is at the root of your repo
