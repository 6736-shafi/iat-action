name: Deploy Azure ML Pipeline (Dev to Prod)

on:
  push:
    branches:
      - dev # Trigger on pushes to the 'dev' branch
  pull_request:
    branches:
      - main
    types: [closed] # Trigger on PR merge into 'main'

  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  deploy-to-dev:
    # Only run this job when pushing to the 'dev' branch
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: development # Associate with the 'development' GitHub environment for secrets and rules

    # Permissions for OIDC are removed as the authentication method has changed to service principal secret.
    # If OIDC is desired again, ensure 'id-token: write' is re-added here.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List files
        # This step helps verify that all necessary files (e.g., run_pipeline.py, components directory) are present
        run: |
          echo "Listing files in current directory: $(pwd)"
          ls -F
          echo "Listing files recursively in current directory:"
          ls -RF .
          echo "Checking for 'components' directory:"
          if [ -d "components" ]; then
            echo "'components' directory found."
            ls -RF components/
          else
            echo "'components' directory NOT found!"
          fi
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        # Install required Python packages for Azure ML interaction, including python-dotenv
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml azure-identity python-dotenv
      - name: Log in to Azure
        # Uses the Azure Login action with a service principal secret for authentication.
        # Ensure 'AZURE_CREDENTIALS' secret is configured in the 'development' environment.
        # The secret should contain the JSON output from 'az ad sp create-for-rbac --json-auth'.
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Pipeline in Dev
        # Pass Azure ML workspace details as environment variables to the Python script
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP }} # Ensure this secret is set for 'development'
          WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE }} # Ensure this secret is set for 'development'
        run: python run_pipeline.py # Assumes run_pipeline.py is at the root of your repo

  deploy-to-prod:

    # Trigger conditions for production deployment:
    # Only push directly to the 'main' branch
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production # Associate with the 'production' GitHub environment (can require manual approval)

    # Permissions for OIDC are removed as the authentication method has changed to service principal secret.
    # If OIDC is desired again, ensure 'id-token: write' is re-added here.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List files
        # This step helps verify that all necessary files are present
        run: |
          echo "Listing files in current directory: $(pwd)"
          ls -F
          echo "Listing files recursively in current directory:"
          ls -RF .
          echo "Checking for 'components' directory:"
          if [ -d "components" ]; then
            echo "'components' directory found."
            ls -RF components/
          else
            echo "'components' directory NOT found!"
          fi
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        # Install required Python packages for Azure ML interaction, including python-dotenv
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml azure-identity python-dotenv
      - name: Log in to Azure
        # Uses the Azure Login action with a service principal secret for authentication.
        # Ensure 'AZURE_CREDENTIALS' secret is configured in the 'production' environment.
        # The secret should contain the JSON output from 'az ad sp create-for-rbac --json-auth'.
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Pipeline in Prod
        # Pass Azure ML workspace details as environment variables to the Python script
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP }}
          WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE }}
        run: python run_pipeline.py
